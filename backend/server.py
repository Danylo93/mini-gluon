from fastapi import FastAPI, APIRouter, HTTPException
from dotenv import load_dotenv
from starlette.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
import os
import logging
from pathlib import Path
from pydantic import BaseModel, Field
from typing import List, Dict, Any
import uuid
from datetime import datetime
from github import Github
import base64
import json


ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# MongoDB connection
mongo_url = os.environ['MONGO_URL']
client = AsyncIOMotorClient(mongo_url)
db = client[os.environ['DB_NAME']]

# GitHub client
github_token = os.environ.get('GITHUB_TOKEN')
if not github_token:
    raise ValueError("GITHUB_TOKEN not found in environment variables")
github_client = Github(github_token)

# Create the main app without a prefix
app = FastAPI()

# Create a router with the /api prefix
api_router = APIRouter(prefix="/api")


# Define Models
class StatusCheck(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    client_name: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)

class StatusCheckCreate(BaseModel):
    client_name: str

class TemplateInfo(BaseModel):
    id: str
    name: str
    description: str
    language: str
    type: str

class ProjectRequest(BaseModel):
    name: str
    description: str
    language: str
    template_id: str
    github_username: str

class ProjectResponse(BaseModel):
    success: bool
    message: str
    repository_url: str = None


# Templates definitions
TEMPLATES = {
    "java": {
        "java-hello": {
            "id": "java-hello",
            "name": "Java Hello World",
            "description": "Simple Java console application with Hello World",
            "language": "java",
            "type": "console",
            "files": {
                "src/main/java/com/example/App.java": '''package com.example;

public class App {
    public static void main(String[] args) {
        System.out.println("Hello World from {project_name}!");
        System.out.println("Generated by Scaffold Forge");
    }
}''',
                "pom.xml": '''<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <groupId>com.example</groupId>
    <artifactId>{project_name}</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    
    <name>{project_name}</name>
    <description>{project_description}</description>
    
    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>''',
                "README.md": '''# {project_name}

{project_description}

## Getting Started

### Prerequisites
- Java 17 or higher
- Maven 3.6 or higher

### Running the application
```bash
mvn compile exec:java -Dexec.mainClass="com.example.App"
```

### Building
```bash
mvn clean compile
```

Generated by **Scaffold Forge** - Template Generator System
''',
                ".github/workflows/ci.yml": '''name: Java CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Compile with Maven
      run: mvn clean compile
    - name: Run tests
      run: mvn test
'''
            }
        },
        "java-springboot": {
            "id": "java-springboot",
            "name": "Spring Boot REST API",
            "description": "Spring Boot application with REST API endpoints",
            "language": "java",
            "type": "web-api",
            "files": {
                "src/main/java/com/example/Application.java": '''package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}''',
                "src/main/java/com/example/controller/HelloController.java": '''package com.example.controller;

import org.springframework.web.bind.annotation.*;
import java.util.Map;
import java.util.HashMap;

@RestController
@RequestMapping("/api")
public class HelloController {
    
    @GetMapping("/hello")
    public Map<String, String> hello() {
        Map<String, String> response = new HashMap<>();
        response.put("message", "Hello from {project_name}!");
        response.put("status", "success");
        return response;
    }
    
    @GetMapping("/health")
    public Map<String, String> health() {
        Map<String, String> response = new HashMap<>();
        response.put("status", "UP");
        response.put("service", "{project_name}");
        return response;
    }
}''',
                "pom.xml": '''<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/>
    </parent>
    
    <groupId>com.example</groupId>
    <artifactId>{project_name}</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    
    <name>{project_name}</name>
    <description>{project_description}</description>
    
    <properties>
        <java.version>17</java.version>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>''',
                "src/main/resources/application.properties": '''server.port=8080
spring.application.name={project_name}
''',
                "README.md": '''# {project_name}

{project_description}

## Getting Started

### Prerequisites
- Java 17 or higher
- Maven 3.6 or higher

### Running the application
```bash
mvn spring-boot:run
```

### API Endpoints
- `GET /api/hello` - Hello world endpoint
- `GET /api/health` - Health check endpoint

### Building
```bash
mvn clean package
```

Generated by **Scaffold Forge** - Template Generator System
''',
                ".github/workflows/ci.yml": '''name: Spring Boot CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build with Maven
      run: mvn clean package
    - name: Run tests
      run: mvn test
'''
            }
        }
    },
    "dotnet": {
        "dotnet-console": {
            "id": "dotnet-console",
            "name": ".NET Console App",
            "description": "Simple .NET console application",
            "language": "dotnet",
            "type": "console",
            "files": {
                "Program.cs": '''using System;

namespace {project_name}
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World from {project_name}!");
            Console.WriteLine("Generated by Scaffold Forge");
            Console.WriteLine("Press any key to exit...");
            Console.ReadKey();
        }
    }
}''',
                "{project_name}.csproj": '''<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>''',
                "README.md": '''# {project_name}

{project_description}

## Getting Started

### Prerequisites
- .NET 8.0 SDK or higher

### Running the application
```bash
dotnet run
```

### Building
```bash
dotnet build
```

Generated by **Scaffold Forge** - Template Generator System
''',
                ".github/workflows/ci.yml": '''name: .NET CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
'''
            }
        },
        "dotnet-webapi": {
            "id": "dotnet-webapi",
            "name": "ASP.NET Core Web API",
            "description": "ASP.NET Core Web API with controllers",
            "language": "dotnet",
            "type": "web-api",
            "files": {
                "Program.cs": '''var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();

app.Run();''',
                "Controllers/HelloController.cs": '''using Microsoft.AspNetCore.Mvc;

namespace {project_name}.Controllers;

[ApiController]
[Route("api/[controller]")]
public class HelloController : ControllerBase
{
    [HttpGet]
    public IActionResult Get()
    {
        return Ok(new { 
            message = "Hello from {project_name}!", 
            status = "success",
            timestamp = DateTime.UtcNow
        });
    }
    
    [HttpGet("health")]
    public IActionResult Health()
    {
        return Ok(new { 
            status = "UP", 
            service = "{project_name}",
            timestamp = DateTime.UtcNow
        });
    }
}''',
                "{project_name}.csproj": '''<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.4.0" />
  </ItemGroup>

</Project>''',
                "appsettings.json": '''{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}''',
                "README.md": '''# {project_name}

{project_description}

## Getting Started

### Prerequisites
- .NET 8.0 SDK or higher

### Running the application
```bash
dotnet run
```

### API Endpoints
- `GET /api/hello` - Hello world endpoint
- `GET /api/hello/health` - Health check endpoint
- `GET /swagger` - API documentation (Development only)

### Building
```bash
dotnet build
```

Generated by **Scaffold Forge** - Template Generator System
''',
                ".github/workflows/ci.yml": '''name: ASP.NET Core CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
'''
            }
        }
    }
}


def get_template_files(language: str, template_id: str, project_name: str, project_description: str) -> Dict[str, str]:
    """Get template files with variables replaced"""
    if language not in TEMPLATES or template_id not in TEMPLATES[language]:
        raise ValueError(f"Template {template_id} not found for language {language}")
    
    template = TEMPLATES[language][template_id]
    files = {}
    
    for file_path, content in template["files"].items():
        # Replace variables in file path
        actual_path = file_path.replace("{project_name}", project_name)
        # Replace variables in content
        actual_content = content.replace("{project_name}", project_name).replace("{project_description}", project_description)
        files[actual_path] = actual_content
    
    return files


# Add your routes to the router instead of directly to app
@api_router.get("/")
async def root():
    return {"message": "Scaffold Forge - Template Generator System"}

@api_router.post("/status", response_model=StatusCheck)
async def create_status_check(input: StatusCheckCreate):
    status_dict = input.dict()
    status_obj = StatusCheck(**status_dict)
    _ = await db.status_checks.insert_one(status_obj.dict())
    return status_obj

@api_router.get("/status", response_model=List[StatusCheck])
async def get_status_checks():
    status_checks = await db.status_checks.find().to_list(1000)
    return [StatusCheck(**status_check) for status_check in status_checks]

@api_router.get("/languages")
async def get_languages():
    """Get available programming languages"""
    return {
        "languages": [
            {
                "id": "java",
                "name": "Java",
                "description": "Enterprise-grade applications with Spring Boot",
                "icon": "☕"
            },
            {
                "id": "dotnet",
                "name": ".NET",
                "description": "Cross-platform applications with ASP.NET Core",
                "icon": "🔵"
            }
        ]
    }

@api_router.get("/templates/{language}")
async def get_templates(language: str):
    """Get available templates for a language"""
    if language not in TEMPLATES:
        raise HTTPException(status_code=404, detail=f"Language {language} not supported")
    
    templates = []
    for template_id, template_info in TEMPLATES[language].items():
        templates.append({
            "id": template_info["id"],
            "name": template_info["name"],
            "description": template_info["description"],
            "language": template_info["language"],
            "type": template_info["type"]
        })
    
    return {"templates": templates}

@api_router.post("/generate", response_model=ProjectResponse)
async def generate_project(request: ProjectRequest):
    """Generate a new project and create GitHub repository"""
    try:
        # Validate template exists
        if request.language not in TEMPLATES or request.template_id not in TEMPLATES[request.language]:
            raise HTTPException(status_code=400, detail=f"Template {request.template_id} not found for language {request.language}")
        
        # Get authenticated user (the token owner)
        auth_user = github_client.get_user()
        
        # Create repository
        repo_name = request.name.lower().replace(" ", "-").replace("_", "-")
        repo = auth_user.create_repo(
            name=repo_name,
            description=request.description,
            private=False,
            auto_init=False
        )
        
        # Get template files
        template_files = get_template_files(
            request.language, 
            request.template_id, 
            request.name,
            request.description
        )
        
        # Create files in repository
        for file_path, content in template_files.items():
            repo.create_file(
                path=file_path,
                message=f"Initial commit: Add {file_path}",
                content=content,
                branch="main"
            )
        
        # Save project info to database
        project_data = {
            "id": str(uuid.uuid4()),
            "name": request.name,
            "description": request.description,
            "language": request.language,
            "template_id": request.template_id,
            "github_username": request.github_username,
            "repository_url": repo.html_url,
            "created_at": datetime.utcnow()
        }
        await db.projects.insert_one(project_data)
        
        return ProjectResponse(
            success=True,
            message=f"Project '{request.name}' created successfully!",
            repository_url=repo.html_url
        )
        
    except Exception as e:
        logger.error(f"Error generating project: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Failed to generate project: {str(e)}")

@api_router.get("/projects")
async def get_projects():
    """Get all generated projects"""
    projects = await db.projects.find().to_list(1000)
    return {"projects": projects}


# Include the router in the main app
app.include_router(api_router)

app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=os.environ.get('CORS_ORIGINS', '*').split(','),
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@app.on_event("shutdown")
async def shutdown_db_client():
    client.close()