"""
Template service for managing project templates.
"""
from typing import Dict, List, Optional
import logging

from app.core.exceptions import TemplateError, ValidationError
from app.core.logging import get_logger
from app.models.template import Template, TemplateInfo, LanguageInfo

logger = get_logger(__name__)


class TemplateService:
    """Service for template operations."""
    
    def __init__(self):
        self.templates = self._load_templates()
        self.languages = self._load_languages()
    
    def _load_templates(self) -> Dict[str, Dict[str, Template]]:
        """Load all available templates."""
        # This would typically load from a database or configuration file
        # For now, we'll use a simplified version of the original templates
        return {
            "java": {
                "java-hello": Template(
                    id="java-hello",
                    name="Java Hello World",
                    description="Simple Java console application with Hello World",
                    language="java",
                    type="console",
                    files={
                        "src/main/java/com/example/App.java": '''package com.example;

public class App {
    public static void main(String[] args) {
        System.out.println("Hello World from {project_name}!");
        System.out.println("Generated by Scaffold Forge");
    }
}''',
                        "src/test/java/com/example/AppTest.java": '''package com.example;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class AppTest {
    
    @Test
    public void testAppMain() {
        // This is a simple test to ensure the CI workflow works
        assertTrue(true, "Basic test should pass");
    }
    
    @Test
    public void testHelloWorld() {
        String message = "Hello World from {project_name}!";
        assertNotNull(message);
        assertTrue(message.contains("Hello World"));
    }
}''',
                        "pom.xml": '''<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <groupId>com.example</groupId>
    <artifactId>{project_name}</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    
    <name>{project_name}</name>
    <description>{project_description}</description>
    
    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>5.10.0</junit.version>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.1.2</version>
            </plugin>
        </plugins>
    </build>
</project>''',
                        "README.md": '''# {project_name}

{project_description}

## Getting Started

### Prerequisites
- Java 17 or higher
- Maven 3.6 or higher

### Running the application
```bash
mvn compile exec:java -Dexec.mainClass="com.example.App"
```

### Building
```bash
mvn clean compile
```

## CI/CD

This project includes GitHub Actions workflows for:
- **CI**: Automated testing and building on every push
- **Release**: Automated releases when tags are created

Generated by **Scaffold Forge** - Template Generator System
''',
                        ".github/workflows/ci.yml": '''name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [17, 21]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: ☕ Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: maven
    
    - name: 📦 Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: 🔍 Validate POM
      run: mvn validate
    
    - name: 🧹 Clean workspace
      run: mvn clean
    
    - name: 🔨 Compile code
      run: mvn compile -DskipTests
    
    - name: 🧪 Run unit tests
      run: mvn test
      env:
        MAVEN_OPTS: -Xmx1024m
    
    - name: 📊 Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
    
    - name: 🏗️ Build package
      run: mvn package -DskipTests
      env:
        MAVEN_OPTS: -Xmx1024m
    
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-java${{ matrix.java-version }}
        path: target/*.jar
        retention-days: 30
    
    - name: 📋 Build summary
      run: |
        echo "✅ Build completed successfully!"
        echo "📦 Artifacts: $(ls -la target/*.jar)"
        echo "☕ Java Version: ${{ matrix.java-version }}"

  security-scan:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: 🔍 OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: '{project_name}'
        path: '.'
        format: 'HTML'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
    
    - name: 🚨 CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: java
    
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    - name: 📤 Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          reports/
          .github/codeql/
        retention-days: 30
    
    - name: 📋 Security summary
      run: |
        echo "🔒 Security scan completed!"
        echo "📊 Reports generated in reports/ directory"

  code-quality:
    name: 🎯 Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: 📦 Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: 🧹 Clean workspace
      run: mvn clean
    
    - name: 🔍 SonarCloud Analysis
      uses: SonarSource/sonarqube-quality-gate-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey={project_name}
          -Dsonar.organization=your-org
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.java.binaries=target/classes
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
    
    - name: 🐛 SpotBugs Analysis
      run: mvn spotbugs:check
      continue-on-error: true
    
    - name: 📏 Checkstyle Analysis
      run: mvn checkstyle:check
      continue-on-error: true
    
    - name: 📊 JaCoCo Coverage
      run: mvn jacoco:report
      continue-on-error: true
    
    - name: 📤 Upload quality reports
      uses: actions/upload-artifact@v4
      with:
        name: quality-reports
        path: |
          target/site/
          target/spotbugsXml.xml
          target/checkstyle-result.xml
        retention-days: 30
    
    - name: 📋 Quality summary
      run: |
        echo "🎯 Code quality analysis completed!"
        echo "📊 Reports available in target/site/"

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, code-quality]
    
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-java17
        path: ./artifacts
    
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "📦 Artifacts ready: $(ls -la ./artifacts/)"
        echo "✅ All quality gates passed!"
        echo "🔒 Security scan completed!"
        echo "🎯 Code quality analysis passed!"
    
    - name: 📋 Deploy summary
      run: |
        echo "🎉 Deploy completed successfully!"
        echo "🌐 Application deployed to staging"
        echo "📊 All workflows executed successfully"
''',
                    },
                    variables={
                        "project_name": "string",
                        "project_description": "string"
                    },
                    dependencies=["Java 17", "Maven 3.6+"],
                    setup_instructions="Run 'mvn compile' to build the project"
                ),
                "java-springboot": Template(
                    id="java-springboot",
                    name="Spring Boot REST API",
                    description="Spring Boot application with REST API endpoints",
                    language="java",
                    type="web-api",
                    files={
                        "src/main/java/com/example/Application.java": '''package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}''',
                        "src/main/java/com/example/controller/HelloController.java": '''package com.example.controller;

import org.springframework.web.bind.annotation.*;
import java.util.Map;
import java.util.HashMap;

@RestController
@RequestMapping("/api")
public class HelloController {
    
    @GetMapping("/hello")
    public Map<String, String> hello() {
        Map<String, String> response = new HashMap<>();
        response.put("message", "Hello from {project_name}!");
        response.put("status", "success");
        return response;
    }
    
    @GetMapping("/health")
    public Map<String, String> health() {
        Map<String, String> response = new HashMap<>();
        response.put("status", "UP");
        response.put("service", "{project_name}");
        return response;
    }
}''',
                        "pom.xml": '''<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/>
    </parent>
    
    <groupId>com.example</groupId>
    <artifactId>{project_name}</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    
    <name>{project_name}</name>
    <description>{project_description}</description>
    
    <properties>
        <java.version>17</java.version>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>''',
                        "src/main/resources/application.properties": '''server.port=8080
spring.application.name={project_name}
''',
                        "README.md": '''# {project_name}

{project_description}

## Getting Started

### Prerequisites
- Java 17 or higher
- Maven 3.6 or higher

### Running the application
```bash
mvn spring-boot:run
```

### API Endpoints
- `GET /api/hello` - Hello world endpoint
- `GET /api/health` - Health check endpoint

### Building
```bash
mvn clean package
```

Generated by **Scaffold Forge** - Template Generator System
''',
                        ".github/workflows/ci.yml": '''name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [17, 21]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: ☕ Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: maven
    
    - name: 📦 Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: 🔍 Validate POM
      run: mvn validate
    
    - name: 🧹 Clean workspace
      run: mvn clean
    
    - name: 🔨 Compile code
      run: mvn compile -DskipTests
    
    - name: 🧪 Run unit tests
      run: mvn test
      env:
        MAVEN_OPTS: -Xmx1024m
    
    - name: 📊 Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
    
    - name: 🏗️ Build package
      run: mvn package -DskipTests
      env:
        MAVEN_OPTS: -Xmx1024m
    
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-java${{ matrix.java-version }}
        path: target/*.jar
        retention-days: 30
    
    - name: 📋 Build summary
      run: |
        echo "✅ Build completed successfully!"
        echo "📦 Artifacts: $(ls -la target/*.jar)"
        echo "☕ Java Version: ${{ matrix.java-version }}"

  security-scan:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: 🔍 OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: '{project_name}'
        path: '.'
        format: 'HTML'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
    
    - name: 🚨 CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: java
    
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    - name: 📤 Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          reports/
          .github/codeql/
        retention-days: 30
    
    - name: 📋 Security summary
      run: |
        echo "🔒 Security scan completed!"
        echo "📊 Reports generated in reports/ directory"

  code-quality:
    name: 🎯 Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: 📦 Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: 🧹 Clean workspace
      run: mvn clean
    
    - name: 🔍 SonarCloud Analysis
      uses: SonarSource/sonarqube-quality-gate-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey={project_name}
          -Dsonar.organization=your-org
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.java.binaries=target/classes
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
    
    - name: 🐛 SpotBugs Analysis
      run: mvn spotbugs:check
      continue-on-error: true
    
    - name: 📏 Checkstyle Analysis
      run: mvn checkstyle:check
      continue-on-error: true
    
    - name: 📊 JaCoCo Coverage
      run: mvn jacoco:report
      continue-on-error: true
    
    - name: 📤 Upload quality reports
      uses: actions/upload-artifact@v4
      with:
        name: quality-reports
        path: |
          target/site/
          target/spotbugsXml.xml
          target/checkstyle-result.xml
        retention-days: 30
    
    - name: 📋 Quality summary
      run: |
        echo "🎯 Code quality analysis completed!"
        echo "📊 Reports available in target/site/"

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, code-quality]
    
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-java17
        path: ./artifacts
    
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "📦 Artifacts ready: $(ls -la ./artifacts/)"
        echo "✅ All quality gates passed!"
        echo "🔒 Security scan completed!"
        echo "🎯 Code quality analysis passed!"
    
    - name: 📋 Deploy summary
      run: |
        echo "🎉 Deploy completed successfully!"
        echo "🌐 Application deployed to staging"
        echo "📊 All workflows executed successfully"
''',
                    },
                    variables={
                        "project_name": "string",
                        "project_description": "string"
                    },
                    dependencies=["Java 17", "Maven 3.6+", "Spring Boot 3.2.0"],
                    setup_instructions="Run 'mvn spring-boot:run' to start the application"
                )
            },
            "dotnet": {
                "dotnet-console": Template(
                    id="dotnet-console",
                    name=".NET Console App",
                    description="Simple .NET console application",
                    language="dotnet",
                    type="console",
                    files={
                        "Program.cs": '''using System;

namespace {project_name}
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World from {project_name}!");
            Console.WriteLine("Generated by Scaffold Forge");
            Console.WriteLine("Press any key to exit...");
            Console.ReadKey();
        }
    }
}''',
                        "{project_name}.csproj": '''<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>''',
                        "README.md": '''# {project_name}

{project_description}

## Getting Started

### Prerequisites
- .NET 8.0 SDK or higher

### Running the application
```bash
dotnet run
```

### Building
```bash
dotnet build
```

Generated by **Scaffold Forge** - Template Generator System
''',
                        ".github/workflows/ci.yml": '''name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dotnet-version: ['8.0.x', '9.0.x']
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔵 Set up .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    
    - name: 📦 Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: 🔍 Restore dependencies
      run: dotnet restore
    
    - name: 🧹 Clean workspace
      run: dotnet clean
    
    - name: 🔨 Build project
      run: dotnet build --no-restore --configuration Release
    
    - name: 🧪 Run unit tests
      run: dotnet test --no-build --verbosity normal --configuration Release
    
    - name: 📊 Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: .NET Tests
        path: TestResults/*.trx
        reporter: dotnet-trx
    
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-dotnet${{ matrix.dotnet-version }}
        path: bin/Release/
        retention-days: 30
    
    - name: 📋 Build summary
      run: |
        echo "✅ Build completed successfully!"
        echo "📦 Artifacts: $(ls -la bin/Release/)"
        echo "🔵 .NET Version: ${{ matrix.dotnet-version }}"

  security-scan:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔵 Set up .NET 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: 🔍 OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: '{project_name}'
        path: '.'
        format: 'HTML'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
    
    - name: 🚨 CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
    
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    - name: 📤 Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          reports/
          .github/codeql/
        retention-days: 30
    
    - name: 📋 Security summary
      run: |
        echo "🔒 Security scan completed!"
        echo "📊 Reports generated in reports/ directory"

  code-quality:
    name: 🎯 Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔵 Set up .NET 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: 📦 Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: 🧹 Clean workspace
      run: dotnet clean
    
    - name: 🔍 SonarCloud Analysis
      uses: SonarSource/sonarqube-quality-gate-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey={project_name}
          -Dsonar.organization=your-org
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.cs.opencover.reportsPaths=coverage.xml
    
    - name: 📊 Code Coverage
      run: dotnet test --collect:"XPlat Code Coverage" --results-directory ./TestResults
      continue-on-error: true
    
    - name: 📤 Upload quality reports
      uses: actions/upload-artifact@v4
      with:
        name: quality-reports
        path: |
          TestResults/
          coverage.xml
        retention-days: 30
    
    - name: 📋 Quality summary
      run: |
        echo "🎯 Code quality analysis completed!"
        echo "📊 Reports available in TestResults/"

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, code-quality]
    
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-dotnet8.0.x
        path: ./artifacts
    
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "📦 Artifacts ready: $(ls -la ./artifacts/)"
        echo "✅ All quality gates passed!"
        echo "🔒 Security scan completed!"
        echo "🎯 Code quality analysis passed!"
    
    - name: 📋 Deploy summary
      run: |
        echo "🎉 Deploy completed successfully!"
        echo "🌐 Application deployed to staging"
        echo "📊 All workflows executed successfully"
''',
                    },
                    variables={
                        "project_name": "string",
                        "project_description": "string"
                    },
                    dependencies=[".NET 8.0 SDK"],
                    setup_instructions="Run 'dotnet run' to execute the application"
                ),
                "dotnet-webapi": Template(
                    id="dotnet-webapi",
                    name="ASP.NET Core Web API",
                    description="ASP.NET Core Web API with controllers",
                    language="dotnet",
                    type="web-api",
                    files={
                        "Program.cs": '''var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();

app.Run();''',
                        "Controllers/HelloController.cs": '''using Microsoft.AspNetCore.Mvc;

namespace {project_name}.Controllers;

[ApiController]
[Route("api/[controller]")]
public class HelloController : ControllerBase
{
    [HttpGet]
    public IActionResult Get()
    {
        return Ok(new { 
            message = "Hello from {project_name}!", 
            status = "success",
            timestamp = DateTime.UtcNow
        });
    }
    
    [HttpGet("health")]
    public IActionResult Health()
    {
        return Ok(new { 
            status = "UP", 
            service = "{project_name}",
            timestamp = DateTime.UtcNow
        });
    }
}''',
                        "{project_name}.csproj": '''<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.4.0" />
  </ItemGroup>

</Project>''',
                        "appsettings.json": '''{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}''',
                        "README.md": '''# {project_name}

{project_description}

## Getting Started

### Prerequisites
- .NET 8.0 SDK or higher

### Running the application
```bash
dotnet run
```

### API Endpoints
- `GET /api/hello` - Hello world endpoint
- `GET /api/hello/health` - Health check endpoint
- `GET /swagger` - API documentation (Development only)

### Building
```bash
dotnet build
```

Generated by **Scaffold Forge** - Template Generator System
''',
                        ".github/workflows/ci.yml": '''name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dotnet-version: ['8.0.x', '9.0.x']
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔵 Set up .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    
    - name: 📦 Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: 🔍 Restore dependencies
      run: dotnet restore
    
    - name: 🧹 Clean workspace
      run: dotnet clean
    
    - name: 🔨 Build project
      run: dotnet build --no-restore --configuration Release
    
    - name: 🧪 Run unit tests
      run: dotnet test --no-build --verbosity normal --configuration Release
    
    - name: 📊 Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: .NET Tests
        path: TestResults/*.trx
        reporter: dotnet-trx
    
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-dotnet${{ matrix.dotnet-version }}
        path: bin/Release/
        retention-days: 30
    
    - name: 📋 Build summary
      run: |
        echo "✅ Build completed successfully!"
        echo "📦 Artifacts: $(ls -la bin/Release/)"
        echo "🔵 .NET Version: ${{ matrix.dotnet-version }}"

  security-scan:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔵 Set up .NET 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: 🔍 OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: '{project_name}'
        path: '.'
        format: 'HTML'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
    
    - name: 🚨 CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
    
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    - name: 📤 Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          reports/
          .github/codeql/
        retention-days: 30
    
    - name: 📋 Security summary
      run: |
        echo "🔒 Security scan completed!"
        echo "📊 Reports generated in reports/ directory"

  code-quality:
    name: 🎯 Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔵 Set up .NET 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: 📦 Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: 🧹 Clean workspace
      run: dotnet clean
    
    - name: 🔍 SonarCloud Analysis
      uses: SonarSource/sonarqube-quality-gate-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey={project_name}
          -Dsonar.organization=your-org
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.cs.opencover.reportsPaths=coverage.xml
    
    - name: 📊 Code Coverage
      run: dotnet test --collect:"XPlat Code Coverage" --results-directory ./TestResults
      continue-on-error: true
    
    - name: 📤 Upload quality reports
      uses: actions/upload-artifact@v4
      with:
        name: quality-reports
        path: |
          TestResults/
          coverage.xml
        retention-days: 30
    
    - name: 📋 Quality summary
      run: |
        echo "🎯 Code quality analysis completed!"
        echo "📊 Reports available in TestResults/"

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, code-quality]
    
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-dotnet8.0.x
        path: ./artifacts
    
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "📦 Artifacts ready: $(ls -la ./artifacts/)"
        echo "✅ All quality gates passed!"
        echo "🔒 Security scan completed!"
        echo "🎯 Code quality analysis passed!"
    
    - name: 📋 Deploy summary
      run: |
        echo "🎉 Deploy completed successfully!"
        echo "🌐 Application deployed to staging"
        echo "📊 All workflows executed successfully"
''',
                    },
                    variables={
                        "project_name": "string",
                        "project_description": "string"
                    },
                    dependencies=[".NET 8.0 SDK", "Swashbuckle.AspNetCore"],
                    setup_instructions="Run 'dotnet run' to start the API server"
                )
            }
        }
    
    def _load_languages(self) -> List[LanguageInfo]:
        """Load supported programming languages."""
        return [
            LanguageInfo(
                id="java",
                name="Java",
                description="Enterprise-grade applications with Spring Boot",
                icon="☕",
                version="17+",
                website="https://www.java.com",
                documentation="https://docs.oracle.com/en/java/"
            ),
            LanguageInfo(
                id="dotnet",
                name=".NET",
                description="Cross-platform applications with ASP.NET Core",
                icon="🔵",
                version="8.0+",
                website="https://dotnet.microsoft.com",
                documentation="https://docs.microsoft.com/en-us/dotnet/"
            )
        ]
    
    def get_languages(self) -> List[LanguageInfo]:
        """Get all supported programming languages."""
        return self.languages
    
    def get_templates_by_language(self, language: str) -> List[TemplateInfo]:
        """Get templates for a specific language."""
        if language not in self.templates:
            raise ValidationError(f"Language '{language}' not supported")
        
        templates = []
        for template_id, template in self.templates[language].items():
            templates.append(TemplateInfo(
                id=template.id,
                name=template.name,
                description=template.description,
                language=template.language,
                type=template.type,
                complexity="beginner",
                estimated_time="5-10 minutes"
            ))
        
        return templates
    
    def get_template(self, language: str, template_id: str) -> Template:
        """Get a specific template."""
        if language not in self.templates:
            raise ValidationError(f"Language '{language}' not supported")
        
        if template_id not in self.templates[language]:
            raise ValidationError(f"Template '{template_id}' not found for language '{language}'")
        
        return self.templates[language][template_id]
    
    def process_template(
        self, 
        template: Template, 
        variables: Dict[str, str]
    ) -> Dict[str, str]:
        """
        Process template files with variable substitution.
        
        Args:
            template: Template to process
            variables: Variables to substitute
            
        Returns:
            Dictionary of processed files
        """
        try:
            processed_files = {}
            
            for file_path, content in template.files.items():
                # Replace variables in file path
                processed_path = file_path
                for var_name, var_value in variables.items():
                    processed_path = processed_path.replace(f"{{{var_name}}}", var_value)
                
                # Replace variables in content
                processed_content = content
                for var_name, var_value in variables.items():
                    processed_content = processed_content.replace(f"{{{var_name}}}", var_value)
                
                processed_files[processed_path] = processed_content
            
            logger.info(f"Processed template {template.id} with {len(processed_files)} files")
            return processed_files
            
        except Exception as e:
            logger.error(f"Failed to process template: {str(e)}")
            raise TemplateError(f"Failed to process template: {str(e)}")
    
    def validate_template_variables(self, template: Template, variables: Dict[str, str]) -> bool:
        """Validate that all required template variables are provided."""
        required_vars = set(template.variables.keys())
        provided_vars = set(variables.keys())
        
        missing_vars = required_vars - provided_vars
        if missing_vars:
            raise ValidationError(f"Missing required variables: {', '.join(missing_vars)}")
        
        return True
